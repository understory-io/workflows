name: "Build & Push Image"

on:
  workflow_call:
    inputs:
      ecr_repository_name:
        type: string
        required: true
      aws_function_name:
        type: string
        required: false
      image_tag_prefix:
        type: string
        required: true
      artifacts_name:
        type: string
        required: true
      architecture:
        type: string
        required: false
        description: "The architecture to build for. This can be either arm64 or x86_64"
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_region:
        required: true

jobs:
  build:
    name: "Build & Push Image"
    runs-on: ubuntu-latest
    outputs:
      image_repo: ${{ inputs.ecr_repository_name }}
      image_tag: ${{ inputs.image_tag_prefix }}latest
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ inputs.artifacts_name }}

      - name: Build Docker Image, tag, and push image to Amazon ECR
        uses: understory-io/workflows/.github/actions/docker-build@main
        with:
          image_tag_prefix: ${{ inputs.image_tag_prefix }}
          app_path: ./
          platform: ${{ inputs.architecture == 'arm64' && 'linux/arm64' || inputs.architecture == 'x86_64' && 'linux/amd64' || '' }}

          ecr_repository_name: ${{ inputs.ecr_repository_name }}
          aws_access_key_id: ${{ secrets.aws_access_key_id }}
          aws_secret_access_key: ${{ secrets.aws_secret_access_key }}
          aws_region: ${{ secrets.aws_region }}

  trigger-deploy:
    if: inputs.aws_function_name != ''
    needs: [build]
    name: "Trigger Deploy"
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      # Needed here because it's a secret value so cannot be passed as an output from the build job
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup aws role arn
        id: setup-aws-role-arn
        env:
          IMAGE_TAG_PREFIX: ${{ inputs.image_tag_prefix }}
        run: |
          if [ "$IMAGE_TAG_PREFIX" = "prod-" ]; then
            ROLE_ARN="arn:aws:iam::189949407637:role/ContinuousDeliveryRole"
          else
            ROLE_ARN="arn:aws:iam::115578597962:role/ContinuousDeliveryRole"
          fi

          echo "ROLE_TO_ASSUME=$ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        env:
          ROLE_TO_ASSUME: ${{ env.ROLE_TO_ASSUME }}
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-duration-seconds: 900

      - name: Check if lambda function exists
        id: check_lambda
        run: |
          if aws lambda get-function --function-name ${{ inputs.aws_function_name }} > /dev/null 2>&1; then
            echo "LAMBDA_EXISTS=true" >> $GITHUB_ENV
          else
            echo "LAMBDA_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Update lambda image uri
        env:
          LAMBDA_EXISTS: ${{ env.LAMBDA_EXISTS }}
        if: env.LAMBDA_EXISTS == 'true'
        run: |
          aws lambda update-function-code --function-name ${{ inputs.aws_function_name }} --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ needs.build.outputs.image_repo }}:${{ needs.build.outputs.image_tag }}
