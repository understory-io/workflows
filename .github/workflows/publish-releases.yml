on:
  workflow_call:
    inputs:
      publish-command:
        type: string
        required: true

      releases-name:
        type: string
        description: "Name shown in slack message. Defaults to repository name"
        default: ${{ github.event.repository.name }}
      releases-name-subtitle:
        type: string
        description: "Appended after release name"
        default: New packages released
      mono-repo:
        type: boolean
        description: "Whether the repository is a mono-repo or not"
      commit-message:
        type: string
        description: "The commit message to use. Default to Version Packages"
        default: Version Packages
      pull-request-title:
        type: string
        description: "Default to Version Packages"
        default: Version Packages
    secrets:
      slack-webhook:
        required: true
      github_ssh_key:
        description: "SSH key to use for git operations like referencing packages referenced by git urls"
        required: false
      changeset-github-token:
        required: true

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  changeset-releases:
    name: Changeset Releases
    permissions:
      contents: write
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.github_ssh_key }}

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          node-version: 22.x
          registry-url: "https://npm.pkg.github.com"

      - name: Setup SSH Agent
        env:
          SSH_KEY: ${{ secrets.github_ssh_key }}
        if: env.SSH_KEY != ''
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.github_ssh_key }}

      - name: Install Dependencies
        run: npm ci

      - name: Configure Git User
        run: |
          git config --global user.name "Understory Services"
          git config --global user.email "understory-services@understory.io"

      - name: Create Release Pull Request or publish changesets
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: ${{ inputs.publish-command }}
          commit: ${{ inputs.commit-message }}
          title: ${{ inputs.pull-request-title }}
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ secrets.changeset-github-token }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release notes
        if: steps.changesets.outputs.published == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releasesNotes=""

          while IFS= read -r package; do
            # Construct tag from package name and version
            # https://github.com/changesets/changesets/blob/main/docs/command-line-options.md#tag

            if [ "${{ inputs.mono-repo }}" = "true" ]; then
              tag=$(echo "$package" | jq -r '.name + "@" + .version')
            else
              tag=$(echo "$package" | jq -r '"v" + .version')
            fi

            notes=$(gh release view "$tag" --json body -q '.body' || echo "No release notes available for $tag")

            # Convert GitHub-style markdown to Slack markdown for proper links
            formattedNotes=$(echo "$notes" | sed -E 's/\[([^]]+)\]\(([^)]+)\)/<\2|\1>/g')

            # jq adds quotes around the final string when using --raw-output and
            # --ascii-output. We remove them again with sed.
            escapedNotes=$(echo "$formattedNotes" | jq --raw-output --raw-input --slurp --ascii-output | sed -e 's/^"//' -e 's/"$//')

            # Append the formatted notes to the releasesNotes
            releasesNotes="${releasesNotes}\n*$tag*:\n\n${escapedNotes}\n\n"
          done < <(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -c '.[]')

          # Use the multiline syntax to export RELEASES_NOTES
          echo "RELEASES_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$releasesNotes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Notify Slack
        if: steps.changesets.outputs.published == 'true'
        uses: slackapi/slack-github-action@v2.0.0
        env:
          RELEASES_NOTES: ${{ env.RELEASES_NOTES }}
        with:
          webhook: ${{ secrets.slack-webhook }}
          webhook-type: incoming-webhook
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ inputs.releases-name }}:* ${{ inputs.releases-name-subtitle }}\n\n${{ env.RELEASES_NOTES }}"
                  }
                }
              ]
            }

      - name: Debugging job output
        run: |
          echo "${{ steps.changesets.outputs.published }}"
