name: 'Build & Push Image'

on:
  workflow_call:
    inputs:
      dotnet_version:
        type: string
        required: false
        default: '6.0.401'
      dotnet_configuration:
        type: string
        required: false
        default: 'Debug'
      nuget_username:
        type: string
        required: false
      ecr_repository_name:
        type: string
        required: true
      image_tag_prefix:
        type: string
        required: true
      aws_function_name:
        type: string
        required: true
    secrets:
      nuget_auth_token:
        required: false
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_region:
        required: true

env:
  DOTNET_VERSION: ${{ inputs.dotnet_version }}
  NUGET_AUTH_TOKEN: ${{ secrets.nuget_auth_token }}

jobs:
  build:
    name: 'Build & Push Image'
    runs-on: ubuntu-latest
    outputs:
      image_repo: ${{ inputs.ecr_repository_name }}
      image_tag: ${{ inputs.image_tag_prefix }}latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Authenticate with Github Nuget Repository
        if: inputs.nuget_username != ''
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --name github --username ${{ inputs.nuget_username }} --password ${{ secrets.nuget_auth_token }} --store-password-in-clear-text --configfile nuget.config

      - name: Run tests
        run: |
          dotnet test

      - name: Build Package
        run: |
          project_name=$(basename *.sln .sln)
          dotnet publish /p:GenerateRuntimeConfigurationFiles=true /p:PublishReadyToRun=true -c ${{ inputs.dotnet_configuration }} --self-contained false -r linux-x64 -o ${GITHUB_WORKSPACE}/out/ $project_name

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository_name }}
        run: |

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.image_tag_prefix }}${{ github.run_number }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.image_tag_prefix }}latest

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.image_tag_prefix }}${{ github.run_number }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.image_tag_prefix }}latest

  trigger-deploy:
    if: inputs.aws_function_name != ''
    needs: [build]
    name: 'Trigger Deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      # Needed here because it's a secret value so cannot be passed as an output from the build job
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup aws role arn
        id: setup-aws-role-arn
        env:
          IMAGE_TAG_PREFIX: ${{ inputs.image_tag_prefix }}
        run: |
          if [ "$IMAGE_TAG_PREFIX" = "prod-" ]; then
            ROLE_ARN="arn:aws:iam::189949407637:role/ContinuousDeliveryRole"
          elif [ "$IMAGE_TAG_PREFIX" = "stage-" ]; then
            ROLE_ARN="arn:aws:iam::446474216075:role/ContinuousDeliveryRole"
          else
            ROLE_ARN="arn:aws:iam::115578597962:role/ContinuousDeliveryRole"
          fi

          echo "ROLE_TO_ASSUME=$ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        env:
          ROLE_TO_ASSUME: ${{ env.ROLE_TO_ASSUME }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-duration-seconds: 900

      - name: Check if lambda function exists
        id: check_lambda
        run: |
          if aws lambda get-function --function-name ${{ inputs.aws_function_name }} > /dev/null 2>&1; then
            echo "LAMBDA_EXISTS=true" >> $GITHUB_ENV
          else
            echo "LAMBDA_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Update lambda image uri
        env:
          LAMBDA_EXISTS: ${{ env.LAMBDA_EXISTS }}
        if: env.LAMBDA_EXISTS == 'true'
        run: |
          aws lambda update-function-code --function-name ${{ inputs.aws_function_name }} --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ needs.build.outputs.image_repo }}:${{ needs.build.outputs.image_tag }}
